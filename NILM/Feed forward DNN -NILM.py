x# -*- coding: utf-8 -*-
"""ANN-fault classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12FvARL5Z1JO6-XLoU3BajsNgmTEXGb8V

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import scipy.io
tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset

```
# This is formatted as code
```

import 3 .cvs files. Busbar L-L voltage, fault on bus 1, 3L - Busbar L-L voltage, fault on bus 1, LG - Busbar L-L voltage, fault on bus 1, LL
"""
mat0 = scipy.io.loadmat('outputdata0-new.mat')
mat1 = scipy.io.loadmat('outputdata1-new.mat')
mat2 = scipy.io.loadmat('outputdata2-new.mat')
mat3 = scipy.io.loadmat('outputdata3-new.mat')
mat4 = scipy.io.loadmat('outputdata4-new.mat')
mat5 = scipy.io.loadmat('outputdata5-new.mat')
mat6 = scipy.io.loadmat('outputdata6-new.mat')

data=mat0['data0_new']
data=np.append(data,mat1['data1_new'],0)
data=np.append(data,mat2['data2_new'],0)
data=np.append(data,mat3['data3_new'],0)
data=np.append(data,mat4['data4_new'],0)
data=np.append(data,mat5['data5_new'],0)
data=np.append(data,mat6['data6_new'],0)





"The output data is just the states of Zone 1 appliances. Change 8 to 8: for Zone 1,2, and motor states"
output_label=data[:,8]

"The input data is just the current of generators. change :6 to :8 to add currents of one 1 and 2. However, the efficiency become %99.999"
data=data[:,:6]
gen_rated_current=2400
zone_rated_current=240



data[:,0:6]=data[:,0:6]/gen_rated_current
data[:,6:]=data[:,6:]/zone_rated_current

print(data)




"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(data, output_label, test_size = 0.2, random_state = 0)
"""### Encoding categorical data

One Hot Encoding Output vector
"""

from keras.utils import np_utils
y_test = np_utils.to_categorical(y_test)
y_train = np_utils.to_categorical(y_train)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=24, activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=36, activation='relu'))

"""### Adding the third hidden layer"""

ann.add(tf.keras.layers.Dense(units=36, activation='relu'))

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units=12, activation='softmax'))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

"""### Training the ANN on the Training set"""
"Number of epochs and batch size were changed"

ann.fit(X_train, y_train, batch_size = 128, epochs = 200)

"""### Predicting the Test set results"""

y_pred = ann.predict(X_test)
y_pred = (y_pred > 0.5)
y_pred=np.argmax(y_pred, axis = 1)
y_test=np.argmax(y_test, axis = 1)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""### Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize = (16,8))
f = sns.heatmap(cm, annot=True)